{
    "type": [
        2,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        2,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        0,
        1,
        3,
        0,
        1,
        0,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        3,
        0,
        1,
        3,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        2,
        2,
        0,
        1,
        2,
        2,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.4.2 (2024-10-31 ucrt) -- \"Pile of Leaves\"\nCopyright (C) 2024 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\nType 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(MLE)",
        "Error: no more error handlers available (recursive errors?); invoking 'abort' restart\n",
        "Error: package or namespace load failed for ‘MLE’ in namespaceImportFrom(ns, loadNamespace(j <- i[[1L]], c(lib.loc, :\n INTEGER() can only be applied to a 'integer', not a 'unknown type #29'\n",
        "In addition: ",
        "Warning message:\n",
        "In namespaceImportFrom(ns, loadNamespace(j <- i[[1L]], c(lib.loc,  :",
        "\n ",
        " type 29 is unimplemented in 'type2char'\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(MLE)",
        "Error: no more error handlers available (recursive errors?); invoking 'abort' restart\n",
        "Lost warning messages\n",
        "Error: no more error handlers available (recursive errors?); invoking 'abort' restart\n",
        "Error: package or namespace load failed for ‘MLE’ in stopifnot(length(class2) == 1L):\n INTEGER() can only be applied to a 'integer', not a 'unknown type #29'\n",
        "In addition: ",
        "Warning message:\n",
        "In stopifnot(length(class2) == 1L) :",
        "\n ",
        " type 29 is unimplemented in 'type2char'\n",
        "> ",
        "?betabinom.mle",
        "\nRestarting R session...\n\n",
        "> ",
        "library(MLE)",
        "> ",
        "binom.mle",
        "Error: object 'binom.mle' not found\n",
        "> ",
        "Rfast::binom.mle",
        "function (x, N = NULL, tol = 1e-07) \n{\n    if (!is.null(N)) {\n        if (length(N) == 1) {\n            p <- sum(x)/length(x)/N\n        }\n        else p <- sum(x)/sum(N)\n        loglik <- sum(dbinom(x, N, p, log = TRUE))\n        res <- list(loglik = loglik, prob = p)\n    }\n    else {\n        n <- length(x)\n        k <- max(x)\n        sx <- sum(x)\n        p <- sx/n/k\n        x1 <- x - 1\n        y <- k - x1\n        derk <- n * digamma(k + 1) - sum(digamma(y)) + n * log(1 - \n            p)\n        derp <- sx/p + (sx - n * k)/(1 - p)\n",
        "        derk2 <- n * trigamma(k + 1) - sum(trigamma(y))\n        derp2 <- -sx/p^2 + (sx - n * k)/(1 - p)^2\n        derkp <- -n/(1 - p)\n        aold <- c(k, p)\n        anew <- aold - c(derp2 * derk - derkp * derp, -derkp * \n            derk + derk2 * derp)/(derk2 * derp2 - derkp^2)\n        i <- 2\n        while (sum(abs(aold - anew)) > tol) {\n            i <- i + 1\n            aold <- anew\n            k <- aold[1]\n            p <- aold[2]\n            y <- k - x1\n            derk <- n * digamma(k + 1) - sum(digamma(y)) + n * \n",
        "                log(1 - p)\n            derp <- sx/p + (sx - n * k)/(1 - p)\n            derk2 <- n * trigamma(k + 1) - sum(trigamma(y))\n            derp2 <- -sx/p^2 + (sx - n * k)/(1 - p)^2\n            derkp <- -n/(1 - p)\n            anew <- aold - c(derp2 * derk - derkp * derp, -derkp * \n                derk + derk2 * derp)/(derk2 * derp2 - derkp^2)\n        }\n        k <- round(anew[1])\n        p <- anew[2]\n        loglik <- sum(dbinom(x, k, p, log = TRUE))\n        names(anew) <- c(\"Number of trials\", \"probability\")\n",
        "        res <- list(iters = i, loglik = loglik, param = anew)\n    }\n    res\n}\n<bytecode: 0x000002aea5d4a368>\n<environment: namespace:Rfast>\n",
        "> ",
        "Rfast2::gammapois.mle(x)",
        "Error: object 'x' not found\n",
        "> ",
        "Rfast2::gammapois.mle",
        "function (x, tol = 1e-07) \n{\n    n <- length(x)\n    slx <- sum(lgamma(x + 1))\n    sx <- sum(x)\n    m <- sx/n\n    m2 <- sum(x^2)/n\n    p <- 1 - m/(m2 - m^2)\n    ini.ea <- max(0, m/p - m)\n    eb <- ini.ea/m\n    if (eb < 1) {\n        lik1 <- sum(lgamma(x + ini.ea)) - n * lgamma(ini.ea) + \n            sx * log(eb/(1 + eb)) - n * ea * log1p(eb)\n        dera <- sum(digamma(x + ini.ea)) * ini.ea - n * digamma(ini.ea) * \n            ea - n * ini.ea * log1p(eb)\n        p <- eb/(1 + eb)\n        derab <- -n * ini.ea * p\n",
        "        derb <- sx * (1 - p) + derab\n        dera2 <- dera + sum(trigamma(x + ini.ea)) * ea^2 - n * \n            trigamma(ini.ea) * ini.ea^2\n        derb2 <- -p * (1 - p) * sx - n * ini.ea * p * (1 - p)\n        anew <- log(c(ini.ea, eb)) - c(derb2 * dera - derab * \n            derb, -derab * dera + dera2 * derb)/(dera2 * derb2 - \n            derab^2)\n        ea <- exp(anew[1])\n        eb <- exp(anew[2])\n        lik2 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * log(eb/(1 + \n            eb)) - n * ea * log1p(eb)\n",
        "        i <- 2\n        while (lik2 - lik1 > tol) {\n            i <- i + 1\n            lik1 <- lik2\n            dera <- sum(digamma(x + ea)) * ea - n * digamma(ea) * \n                ea - n * ea * log1p(eb)\n            p <- eb/(1 + eb)\n            derab <- -n * ea * p\n            derb <- sx * (1 - p) + derab\n            dera2 <- dera + sum(trigamma(x + ea)) * ea^2 - n * \n                trigamma(ea) * ea^2\n            derb2 <- -p * (1 - p) * sx - n * ea * p * (1 - p)\n            anew <- log(c(ea, eb)) - c(derb2 * dera - derab * \n",
        "                derb, -derab * dera + dera2 * derb)/(dera2 * \n                derb2 - derab^2)\n            ea <- exp(anew[1])\n            eb <- exp(anew[2])\n            lik2 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * \n                log(eb/(1 + eb)) - n * ea * log1p(eb)\n        }\n        par <- c(ea, eb)\n        names(par) <- c(\"shape\", \"scale\")\n        res <- list(iters = i, loglik = lik2, par = par)\n    }\n    else {\n        ea <- ini.ea\n        eb <- m/ea\n        lik1 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * log(eb/(1 + \n",
        "            eb)) - n * ea * log1p(eb)\n        dera <- sum(digamma(x + ea)) * ea - n * digamma(ea) * \n            ea - n * ea * log1p(eb)\n        p <- eb/(1 + eb)\n        derab <- -n * ea * p\n        derb <- sx * (1 - p) + derab\n        dera2 <- dera + sum(trigamma(x + ea)) * ea^2 - n * trigamma(ea) * \n            ea^2\n        derb2 <- -p * (1 - p) * sx - n * ea * p * (1 - p)\n        anew <- log(c(ea, eb)) - c(derb2 * dera - derab * derb, \n            -derab * dera + dera2 * derb)/(dera2 * derb2 - derab^2)\n        ea <- exp(anew[1])\n",
        "        eb <- exp(anew[2])\n        lik2 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * log(eb/(1 + \n            eb)) - n * ea * log1p(eb)\n        i <- 2\n        while (lik2 - lik1 > tol) {\n            i <- i + 1\n            lik1 <- lik2\n            dera <- sum(digamma(x + ea)) * ea - n * digamma(ea) * \n                ea - n * ea * log1p(eb)\n            p <- eb/(1 + eb)\n            derab <- -n * ea * p\n            derb <- sx * (1 - p) + derab\n            dera2 <- dera + sum(trigamma(x + ea)) * ea^2 - n * \n                trigamma(ea) * ea^2\n",
        "            derb2 <- -p * (1 - p) * sx - n * ea * p * (1 - p)\n            anew <- log(c(ea, eb)) - c(derb2 * dera - derab * \n                derb, -derab * dera + dera2 * derb)/(dera2 * \n                derb2 - derab^2)\n            ea <- exp(anew[1])\n            eb <- exp(anew[2])\n            lik2 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * \n                log(eb/(1 + eb)) - n * ea * log1p(eb)\n        }\n        par <- c(ea, eb)\n        names(par) <- c(\"shape\", \"scale\")\n        res <- list(iters = i, loglik = lik2, par = par)\n",
        "    }\n    res\n}\n<bytecode: 0x000002aea7660718>\n<environment: namespace:Rfast2>\n",
        "> ",
        "gp::gp.mle",
        "function (y) \n{\n    fun <- function(par, y, y1, n, sy) {\n        theta <- exp(par[1])\n        lambda <- 1/(1 + exp(-par[2]))\n        f <- n * log(theta) + sum(y1 * log(theta + lambda * y)) - \n            n * theta - sy * lambda\n        -f\n    }\n    sy <- sum(y)\n    n <- length(y)\n    my <- sy/n\n    s2 <- Rfast::Var(y)\n    y1 <- y - 1\n    theta <- log(sqrt(my^3/s2))\n    f <- 1 - sqrt(my/s2)\n    lambda <- log(f/(1 - f))\n    ini <- c(theta, lambda)\n    mod <- optim(ini, fun, y = y, y1 = y1, n = n, sy = sy, control = list(maxit = 10000))\n",
        "    lik1 <- mod$value\n    mod <- optim(mod$par, fun, y = y, y1 = y1, n = n, sy = sy, \n        control = list(maxit = 10000))\n    lik2 <- mod$value\n    while (lik1 - lik2 > 1e-06) {\n        lik1 <- lik2\n        mod <- optim(mod$par, fun, y = y, y1 = y1, n = n, sy = sy, \n            control = list(maxit = 10000))\n        lik2 <- mod$value\n    }\n    lik <- -mod$value - sum(lgamma(y + 1))\n    par <- mod$par\n    par <- c(exp(par[1]), 1/(1 + exp(-par[2])), lik)\n    names(par) <- c(\"theta\", \"lambda\", \"loglik\")\n    par\n",
        "}\n<bytecode: 0x000002aea7682278>\n<environment: namespace:gp>\n",
        "> ",
        "Rfast::betabinom.mle",
        "function (x, N, tol = 1e-07) \n{\n    x1 <- x\n    x2 <- N - x\n    z1 <- Rfast::sort_unique(x1)\n    n1 <- as.vector(table(x1))\n    z2 <- Rfast::sort_unique(x2)\n    n2 <- as.vector(table(x2))\n    n <- length(x1)\n    m1 <- sum(x1)/n\n    m2 <- sum(x1^2)/n\n    down <- N * m2/m1 - N * m1 - N + m1\n    a <- (N * m1 - m2)/down\n    b <- (N - m1) * (N - m2/m1)/down\n    a <- abs(a)\n    b <- abs(b)\n    co <- -n * digamma(N + a + b) + n * digamma(a + b)\n    dera <- sum(digamma(z1 + a) * n1) + co - n * digamma(a)\n    derb <- sum(digamma(z2 + b) * n2) + co - n * digamma(b)\n",
        "    derab <- -n * trigamma(N + a + b) + n * trigamma(a + b)\n    dera2 <- sum(trigamma(z1 + a) * n1) + derab - n * trigamma(a)\n    derb2 <- sum(trigamma(z2 + b) * n2) + derab - n * trigamma(b)\n    aold <- c(a, b)\n    anew <- aold - c(derb2 * dera - derab * derb, -derab * dera + \n        dera2 * derb)/(dera2 * derb2 - derab^2)\n    i <- 2\n    while (sum(abs(aold - anew)) > tol) {\n        i <- i + 1\n        aold <- anew\n        a <- anew[1]\n        b <- anew[2]\n        co <- -n * digamma(N + a + b) + n * digamma(a + b)\n",
        "        dera <- sum(digamma(z1 + a) * n1) + co - n * digamma(a)\n        derb <- sum(digamma(z2 + b) * n2) + co - n * digamma(b)\n        derab <- -n * trigamma(N + a + b) + n * trigamma(a + \n            b)\n        dera2 <- sum(trigamma(z1 + a) * n1) + derab - n * trigamma(a)\n        derb2 <- sum(trigamma(z2 + b) * n2) + derab - n * trigamma(b)\n        anew <- aold - c(derb2 * dera - derab * derb, -derab * \n            dera + dera2 * derb)/(dera2 * derb2 - derab^2)\n    }\n    a <- anew[1]\n    b <- anew[2]\n    loglik <- n * Rfast::Lgamma(N + 1) - sum(Rfast::Lgamma(z1 + \n",
        "        1) * n1) - sum(Rfast::Lgamma(z2 + 1) * n2) + sum(Rfast::Lgamma(z1 + \n        a) * n1) + sum(Rfast::Lgamma(z2 + b) * n2) - n * lgamma(N + \n        a + b) - n * lbeta(a, b)\n    pa <- c(a, b)\n    names(pa) <- c(\"alpha\", \"beta\")\n    list(iters = i, param = pa, loglik = loglik)\n}\n<bytecode: 0x000002aea76420d0>\n<environment: namespace:Rfast>\n",
        "> ",
        "Rfast::negbin.mle",
        "function (x, type = 1, tol = 1e-09) \n{\n    n <- length(x)\n    sx <- sum(x)\n    m <- sx/n\n    m2 <- sum(x^2)/n\n    p <- 1 - m/(m2 - m^2)\n    expr1 <- m/p - m\n    mess <- NULL\n    if (expr1 < 0) \n        mess <- c(\"Negative estimate of number of failures. A geometric or a binomial distribution is perhaps more suitable.\")\n    expr1 <- abs(expr1)\n    if (type == 1) {\n        r1 <- log(expr1)\n        a <- x + expr1\n        f <- sum(Rfast::Digamma(a)) * expr1 - n * Rfast::Digamma(expr1) * \n            expr1 + n * expr1 * r1 - n * expr1 * log(expr1 + \n",
        "            m)\n        f2 <- f + sum(Rfast::Trigamma(a)) * expr1^2 - n * Rfast::Trigamma(expr1) * \n            expr1^2 + n * expr1 - n * expr1^2/(expr1 + m)\n        r2 <- r1 - f/f2\n        i <- 2\n        while (abs(r1 - r2) > tol & r2 < 15) {\n            i <- i + 1\n            expr1 <- exp(r2)\n            r1 <- r2\n            a <- x + expr1\n            f <- sum(Rfast::Digamma(a)) * expr1 - n * Rfast::Digamma(expr1) * \n                expr1 + n * expr1 * r1 - n * expr1 * log(expr1 + \n                m)\n            f2 <- f + sum(Rfast::Trigamma(a)) * expr1^2 - n * \n",
        "                trigamma(expr1) * expr1^2 + n * expr1 - n * expr1^2/(expr1 + \n                m)\n            r2 <- r1 - f/f2\n        }\n    }\n    else {\n        z <- Rfast::sort_unique(x)\n        nz <- Rfast::Table(x)\n        r1 <- log(expr1)\n        a <- z + expr1\n        f <- sum(Rfast::Digamma(a) * nz) * expr1 - n * Rfast::Digamma(expr1) * \n            expr1 + n * expr1 * r1 - n * expr1 * log(expr1 + \n            m)\n        f2 <- f + sum(Rfast::Trigamma(a) * nz) * expr1^2 - n * \n            Rfast::Trigamma(expr1) * expr1^2 + n * expr1 - n * \n",
        "            expr1^2/(expr1 + m)\n        r2 <- r1 - f/f2\n        i <- 2\n        while (abs(r1 - r2) > tol & r2 < 15) {\n            i <- i + 1\n            expr1 <- exp(r2)\n            r1 <- r2\n            a <- z + expr1\n            f <- sum(Rfast::Digamma(a) * nz) * expr1 - n * Rfast::Digamma(expr1) * \n                expr1 + n * expr1 * r1 - n * expr1 * log(expr1 + \n                m)\n            f2 <- f + sum(Rfast::Trigamma(a) * nz) * expr1^2 - \n                n * Rfast::Trigamma(expr1) * expr1^2 + n * expr1 - \n",
        "                n * expr1^2/(expr1 + m)\n            r2 <- r1 - f/f2\n        }\n    }\n    expr2 <- exp(r2)\n    p <- expr2/(expr2 + m)\n    param <- c(p, expr2, m)\n    names(param) <- c(\"success probability\", \"number of failures\", \n        \"mean\")\n    loglik <- sum(Rfast::Lgamma(x + expr2)) - sum(Rfast::Lgamma(x + \n        1)) - n * lgamma(expr2) + sx * log(1 - p) + n * expr2 * \n        log(p)\n    list(mess = mess, iters = i, loglik = loglik, param = param)\n}\n<bytecode: 0x000002aea75f1628>\n<environment: namespace:Rfast>\n",
        "> ",
        "Rfast::betageom.mle",
        "function (x, tol = 1e-07) \n{\n    n <- length(x)\n    m1 <- sum(x)/n\n    m2 <- sum(x^2)/n\n    b <- abs(2 * (m2 - m1^2)/(m2 - m1 - 2 * m1^2))\n    a <- abs(m1 * (b - 1))\n    lik1 <- sum(lbeta(a + 1, b + x)) - n * lbeta(a, b)\n    ya <- a + x\n    y <- ya + b + 1\n    com <- n * digamma(a + b) - sum(Digamma(y))\n    dera <- sum(Rfast::Digamma(ya)) + com - n * digamma(a)\n    derb <- n * digamma(b + 1) + com - n * digamma(b)\n    derab <- n * trigamma(a + b) - sum(Rfast::Trigamma(y))\n    dera2 <- sum(Rfast::Trigamma(ya)) + derab - n * trigamma(a)\n",
        "    derb2 <- n * trigamma(b + 1) + derab - n * trigamma(b)\n    aold <- c(a, b)\n    anew <- aold - c(derb2 * dera - derab * derb, -derab * dera + \n        dera2 * derb)/(dera2 * derb2 - derab^2)\n    a <- anew[1]\n    b <- anew[2]\n    lik2 <- sum(lbeta(a + 1, b + x)) - n * lbeta(a, b)\n    i <- 2\n    while (abs(lik2 - lik1) > tol) {\n        i <- i + 1\n        lik1 <- lik2\n        aold <- anew\n        a <- aold[1]\n        b <- aold[2]\n        ya <- a + x\n        y <- ya + b + 1\n        com <- n * digamma(a + b) - sum(Digamma(y))\n",
        "        dera <- sum(Rfast::Digamma(ya)) + com - n * digamma(a)\n        derb <- n * digamma(b + 1) + com - n * digamma(b)\n        derab <- n * trigamma(a + b) - sum(Rfast::Trigamma(y))\n        dera2 <- sum(.Call(\"Rfast_Trigamma\", PACKAGE = \"Rfast\", \n            ya)) + derab - n * trigamma(a)\n        derb2 <- n * trigamma(b + 1) + derab - n * trigamma(b)\n        anew <- aold - c(derb2 * dera - derab * derb, -derab * \n            dera + dera2 * derb)/(dera2 * derb2 - derab^2)\n        a <- anew[1]\n        b <- anew[2]\n",
        "        lik2 <- sum(lbeta(a + 1, b + x)) - n * lbeta(a, b)\n    }\n    names(anew) <- c(\"alpha\", \"beta\")\n    list(iters = i, loglik = lik2, param = anew)\n}\n<bytecode: 0x000002aea7622488>\n<environment: namespace:Rfast>\n",
        "> ",
        "fast::logseries.mle",
        "Error in loadNamespace(x) : there is no package called ‘fast’\n",
        "> ",
        "Rfast::logseries.mle",
        "function (x, tol = 1e-09) \n{\n    n <- length(x)\n    sx <- sum(x)\n    m <- sx/n\n    p1 <- 1/m\n    p <- 1 - p1\n    a1 <- log(p/p1)\n    loga1 <- log(p1)\n    com <- p/loga1\n    der <- m * p1 + com\n    der2 <- -m * p * p1 + p * p1/loga1 + com^2\n    a2 <- a1 - der/der2\n    i <- 2\n    while (abs(a1 - a2) > tol) {\n        i <- i + 1\n        a1 <- a2\n        ea <- exp(a1)\n        p <- ea/(1 + ea)\n        p1 <- 1 - p\n        loga1 <- log(p1)\n        com <- p/loga1\n        der <- m * p1 + com\n        der2 <- -m * p * p1 + p * p1/loga1 + com^2\n",
        "        a2 <- a1 - der/der2\n    }\n    list(iters = i, prob = p, loglik = sx * log(p) - sum(log(x)) - \n        n * log(-loga1))\n}\n<bytecode: 0x000002aea760eab0>\n<environment: namespace:Rfast>\n",
        "> ",
        "Rfast2::gammapois.mle",
        "function (x, tol = 1e-07) \n{\n    n <- length(x)\n    slx <- sum(lgamma(x + 1))\n    sx <- sum(x)\n    m <- sx/n\n    m2 <- sum(x^2)/n\n    p <- 1 - m/(m2 - m^2)\n    ini.ea <- max(0, m/p - m)\n    eb <- ini.ea/m\n    if (eb < 1) {\n        lik1 <- sum(lgamma(x + ini.ea)) - n * lgamma(ini.ea) + \n            sx * log(eb/(1 + eb)) - n * ea * log1p(eb)\n        dera <- sum(digamma(x + ini.ea)) * ini.ea - n * digamma(ini.ea) * \n            ea - n * ini.ea * log1p(eb)\n        p <- eb/(1 + eb)\n        derab <- -n * ini.ea * p\n",
        "        derb <- sx * (1 - p) + derab\n        dera2 <- dera + sum(trigamma(x + ini.ea)) * ea^2 - n * \n            trigamma(ini.ea) * ini.ea^2\n        derb2 <- -p * (1 - p) * sx - n * ini.ea * p * (1 - p)\n        anew <- log(c(ini.ea, eb)) - c(derb2 * dera - derab * \n            derb, -derab * dera + dera2 * derb)/(dera2 * derb2 - \n            derab^2)\n        ea <- exp(anew[1])\n        eb <- exp(anew[2])\n        lik2 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * log(eb/(1 + \n            eb)) - n * ea * log1p(eb)\n",
        "        i <- 2\n        while (lik2 - lik1 > tol) {\n            i <- i + 1\n            lik1 <- lik2\n            dera <- sum(digamma(x + ea)) * ea - n * digamma(ea) * \n                ea - n * ea * log1p(eb)\n            p <- eb/(1 + eb)\n            derab <- -n * ea * p\n            derb <- sx * (1 - p) + derab\n            dera2 <- dera + sum(trigamma(x + ea)) * ea^2 - n * \n                trigamma(ea) * ea^2\n            derb2 <- -p * (1 - p) * sx - n * ea * p * (1 - p)\n            anew <- log(c(ea, eb)) - c(derb2 * dera - derab * \n",
        "                derb, -derab * dera + dera2 * derb)/(dera2 * \n                derb2 - derab^2)\n            ea <- exp(anew[1])\n            eb <- exp(anew[2])\n            lik2 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * \n                log(eb/(1 + eb)) - n * ea * log1p(eb)\n        }\n        par <- c(ea, eb)\n        names(par) <- c(\"shape\", \"scale\")\n        res <- list(iters = i, loglik = lik2, par = par)\n    }\n    else {\n        ea <- ini.ea\n        eb <- m/ea\n        lik1 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * log(eb/(1 + \n",
        "            eb)) - n * ea * log1p(eb)\n        dera <- sum(digamma(x + ea)) * ea - n * digamma(ea) * \n            ea - n * ea * log1p(eb)\n        p <- eb/(1 + eb)\n        derab <- -n * ea * p\n        derb <- sx * (1 - p) + derab\n        dera2 <- dera + sum(trigamma(x + ea)) * ea^2 - n * trigamma(ea) * \n            ea^2\n        derb2 <- -p * (1 - p) * sx - n * ea * p * (1 - p)\n        anew <- log(c(ea, eb)) - c(derb2 * dera - derab * derb, \n            -derab * dera + dera2 * derb)/(dera2 * derb2 - derab^2)\n        ea <- exp(anew[1])\n",
        "        eb <- exp(anew[2])\n        lik2 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * log(eb/(1 + \n            eb)) - n * ea * log1p(eb)\n        i <- 2\n        while (lik2 - lik1 > tol) {\n            i <- i + 1\n            lik1 <- lik2\n            dera <- sum(digamma(x + ea)) * ea - n * digamma(ea) * \n                ea - n * ea * log1p(eb)\n            p <- eb/(1 + eb)\n            derab <- -n * ea * p\n            derb <- sx * (1 - p) + derab\n            dera2 <- dera + sum(trigamma(x + ea)) * ea^2 - n * \n                trigamma(ea) * ea^2\n",
        "            derb2 <- -p * (1 - p) * sx - n * ea * p * (1 - p)\n            anew <- log(c(ea, eb)) - c(derb2 * dera - derab * \n                derb, -derab * dera + dera2 * derb)/(dera2 * \n                derb2 - derab^2)\n            ea <- exp(anew[1])\n            eb <- exp(anew[2])\n            lik2 <- sum(lgamma(x + ea)) - n * lgamma(ea) + sx * \n                log(eb/(1 + eb)) - n * ea * log1p(eb)\n        }\n        par <- c(ea, eb)\n        names(par) <- c(\"shape\", \"scale\")\n        res <- list(iters = i, loglik = lik2, par = par)\n",
        "    }\n    res\n}\n<bytecode: 0x000002aea7660718>\n<environment: namespace:Rfast2>\n",
        "> ",
        "skellam::skellam.mle",
        "function (x) \n{\n    n <- length(x)\n    sx <- sum(x)\n    sx2 <- sx/2\n    mx <- sx/n\n    theta <- stats::var(x)/2 - mx/2\n    skel <- function(theta) {\n        a <- 2 * sqrt(theta^2 + theta * mx)\n        n * 2 * theta + sx - sx2 * log(1 + mx/theta) - sum(log(besselI(a, \n            x, expon.scaled = TRUE))) - n * a\n    }\n    options(warn = -1)\n    mod <- stats::nlm(skel, theta)\n    param <- c(mod$estimate + mx, mod$estimate)\n    names(param) <- c(\"mu 1\", \"mu 2\")\n    list(iters = mod$iterations, loglik = -mod$minimum, param = param)\n",
        "}\n<bytecode: 0x000002aea7662d80>\n<environment: namespace:skellam>\n",
        "> ",
        "Rfast::gumbel.mle",
        "function (x, tol = 1e-09) \n{\n    n <- length(x)\n    m <- sum(x)/n\n    x2 <- x^2\n    s1 <- sqrt(6 * sum(x2)/n - 6 * m^2)/pi\n    y <- exp(-(x - m)/s1)\n    sy <- sum(y)\n    co <- sum(x * y)\n    f <- s1 - m + co/sy\n    f2 <- 1 + (sum(x2 * y) * sy - co^2)/s1^2/sy^2\n    s2 <- s1 - f/f2\n    i <- 2\n    while (abs(s1 - s2) > tol) {\n        i <- i + 1\n        s1 <- s2\n        y <- exp(-(x - m)/s1)\n        sy <- sum(y)\n        co <- sum(x * y)\n        f <- s1 - m + co/sy\n        f2 <- 1 + (sum(x2 * y) * sy - co^2)/s1^2/sy^2\n",
        "        s2 <- s1 - f/f2\n    }\n    y2 <- exp(-x/s2)\n    sy2 <- sum(y2)\n    m <- -s2 * log(sy2/n)\n    y <- (x - m)/s2\n    lik <- -n * log(s2) - sum(y) - sum(exp(-y))\n    param <- c(m, s2)\n    names(param) <- c(\"location\", \"scale\")\n    list(iters = i, loglik = lik, param = param)\n}\n<bytecode: 0x000002aea4085450>\n<environment: namespace:Rfast>\n",
        "> ",
        "Rfast::tmle",
        "function (x, v = 5, tol = 1e-08) \n{\n    n <- length(x)\n    m <- sum(x)/n\n    s <- (sum(x^2) - n * m)/(n - 1)\n    f <- n/2\n    up <- (v + 1)/2\n    con <- n * lgamma(up) - n * lgamma(v/2) - f * log(pi * v)\n    y <- (x - m)^2\n    wi <- 1/(v + y/s)\n    sumwi <- sum(wi)\n    s <- sum(wi * y)/sumwi\n    m1 <- sum(wi * x)/sumwi\n    y <- (x - m1)^2\n    z <- v + y/s\n    wi <- 1/z\n    sumwi <- sum(wi)\n    s <- sum(wi * y)/sumwi\n    m2 <- sum(wi * x)/sumwi\n    y <- (x - m2)^2\n    z <- v + y/s\n    i <- 2\n    while (abs(m1 - m2) > tol) {\n",
        "        i <- i + 1\n        m1 <- m2\n        wi <- 1/z\n        sumwi <- sum(wi)\n        s <- sum(wi * y)/sumwi\n        m2 <- sum(wi * x)/sumwi\n        y <- (x - m2)^2\n        z <- v + y/s\n    }\n    loglik <- -f * log(s) - up * sum(log(z/v))\n    param <- c(m2, s)\n    names(param) <- c(\"location\", \"scatter\")\n    list(iters = i, loglik = loglik + con, param = param)\n}\n<bytecode: 0x000002ae62bd8b38>\n<environment: namespace:Rfast>\n",
        "> ",
        "Rfast::tobit.mle",
        "function (y, tol = 1e-09) \n{\n    y1 <- y[y > 0]\n    n1 <- length(y1)\n    n <- length(y)\n    n0 <- n - n1\n    sy12 <- sum(y1^2)\n    m <- mean(y)\n    s <- sqrt(sy12/n - m^2)\n    sy1 <- n * m\n    com <- dnorm(m, 0, s)/pnorm(-m/s)\n    derm <- (sy1 - n1 * m)/s^2 - n0 * com\n    derm2 <- -n1/s^2 - n0 * (-m/s^2 * com + com^2)\n    ders <- -n1 + (sy12 - 2 * m * sy1 + n1 * m^2)/s^2 + n0 * \n        m * com\n    ders2 <- -2 * (sy12 - 2 * m * sy1 + n1 * m^2)/s^2 + n0 * \n        m * (-com + m^2/s^2 * com - com^2 * m)\n    derms <- -2 * (sy1 - n1 * m)/s^2 - n0 * (-com + m^2/s^2 * \n",
        "        com - com^2 * m)\n    aold <- c(m, log(s))\n    anew <- aold - c(ders2 * derm - derms * ders, -derms * derm + \n        derm2 * ders)/(derm2 * ders2 - derms^2)\n    i <- 2\n    while (sum(abs(aold - anew)) > tol) {\n        i <- i + 1\n        aold <- anew\n        m <- anew[1]\n        s <- exp(anew[2])\n        com <- dnorm(m, 0, s)/pnorm(-m/s, 0, 1)\n        derm <- (sy1 - n1 * m)/s^2 - n0 * com\n        derm2 <- -n1/s^2 - n0 * (-m/s^2 * com + com^2)\n        ders <- -n1 + (sy12 - 2 * m * sy1 + n1 * m^2)/s^2 + n0 * \n",
        "            m * com\n        ders2 <- -2 * (sy12 - 2 * m * sy1 + n1 * m^2)/s^2 + n0 * \n            m * (-com + m^2/s^2 * com - com^2 * m)\n        derms <- -2 * (sy1 - n1 * m)/s^2 + n0 * (com - m^2/s^2 * \n            com + com^2 * m)\n        anew <- aold - c(ders2 * derm - derms * ders, -derms * \n            derm + derm2 * ders)/(derm2 * ders2 - derms^2)\n    }\n    s <- exp(anew[2])\n    loglik <- -0.5 * n1 * log(2 * pi * s^2) - 0.5 * (sy12 - 2 * \n        m * sy1 + n1 * m^2)/s^2 + n0 * pnorm(-m/s, log.p = TRUE)\n",
        "    param <- c(anew[1], s)\n    names(param) <- c(\"location\", \"scale\")\n    list(iters = i, loglik = loglik, param = param)\n}\n<bytecode: 0x000002ae62c188b0>\n<environment: namespace:Rfast>\n\nRestarting R session...\n\n",
        "> ",
        "CCd::cc.mle",
        "function(y) {\n\n  n <- length(y)\n  fun <- function(par, y, n) {\n    mu <- par[1]  ;  lambda <- exp(par[2])\n    - n * log( tanh(lambda * pi) ) - n * log(lambda) + sum( log( lambda^2 + (y - mu)^2) )\n  }\n  s <- 0.5 * abs( Rfast::nth(y, 3 * n/4) - Rfast::nth(y, n/4) )\n  logs <- log(s)\n  mod <- optim( c(mean(y), logs), y = y, n = n, fun, control = list(maxit = 5000) )\n  param <- c( mod$par[1], exp(mod$par[2]) )\n  names(param) <- c(\"mu\", \"lambda\")\n  list(param = param, loglik = -mod$value - n * log(pi))\n}\n<bytecode: 0x0000017ea2093ad0>\n",
        "<environment: namespace:CCd>\n",
        "> ",
        "library(MLE)",
        "> ",
        "Rfast::binom.mle",
        "function (x, N = NULL, tol = 1e-07) \n{\n    if (!is.null(N)) {\n        if (length(N) == 1) {\n            p <- sum(x)/length(x)/N\n        }\n        else p <- sum(x)/sum(N)\n        loglik <- sum(dbinom(x, N, p, log = TRUE))\n        res <- list(loglik = loglik, prob = p)\n    }\n    else {\n        n <- length(x)\n        k <- max(x)\n        sx <- sum(x)\n        p <- sx/n/k\n        x1 <- x - 1\n        y <- k - x1\n        derk <- n * digamma(k + 1) - sum(digamma(y)) + n * log(1 - \n            p)\n        derp <- sx/p + (sx - n * k)/(1 - p)\n",
        "        derk2 <- n * trigamma(k + 1) - sum(trigamma(y))\n        derp2 <- -sx/p^2 + (sx - n * k)/(1 - p)^2\n        derkp <- -n/(1 - p)\n        aold <- c(k, p)\n        anew <- aold - c(derp2 * derk - derkp * derp, -derkp * \n            derk + derk2 * derp)/(derk2 * derp2 - derkp^2)\n        i <- 2\n        while (sum(abs(aold - anew)) > tol) {\n            i <- i + 1\n            aold <- anew\n            k <- aold[1]\n            p <- aold[2]\n            y <- k - x1\n            derk <- n * digamma(k + 1) - sum(digamma(y)) + n * \n",
        "                log(1 - p)\n            derp <- sx/p + (sx - n * k)/(1 - p)\n            derk2 <- n * trigamma(k + 1) - sum(trigamma(y))\n            derp2 <- -sx/p^2 + (sx - n * k)/(1 - p)^2\n            derkp <- -n/(1 - p)\n            anew <- aold - c(derp2 * derk - derkp * derp, -derkp * \n                derk + derk2 * derp)/(derk2 * derp2 - derkp^2)\n        }\n        k <- round(anew[1])\n        p <- anew[2]\n        loglik <- sum(dbinom(x, k, p, log = TRUE))\n        names(anew) <- c(\"Number of trials\", \"probability\")\n",
        "        res <- list(iters = i, loglik = loglik, param = anew)\n    }\n    res\n}\n<bytecode: 0x0000017ea1fd7368>\n<environment: namespace:Rfast>\n\nRestarting R session...\n\n",
        "> ",
        "library(MLE)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(MLE)",
        "> ",
        "Directional::circexp.mle(",
        "+ ",
        "> ",
        "GR98 0171 0280 0060 2801 0213 758 ",
        "Error: unexpected numeric constant in \"GR98 0171\"\n",
        "> ",
        "Directional::circexp.mle(",
        "+ ",
        "> ",
        "Directional::circexp.mle",
        "function(x, rads = FALSE, tol = 1e-06) {\n  if ( !rads )   x <- x * pi/180\n  n <- length(x)\n  sx <- sum(x)\n  fun <- function(lam, n, sx)  n * log(lam) - lam * sx - sum( log( 1 - exp(-2 * pi * lam) ) )\n  mod <- optimise(fun, c(0.00001, 1000), n = n, sx = sx, tol = tol)\n  list(loglik = mod$objective, lambda = mod$maximum)\n}\n<bytecode: 0x000001484614e9b0>\n<environment: namespace:Directional>\n",
        "> ",
        "?circ.mle",
        "> ",
        "y <- rcauchy(100, 3, 1)",
        "> ",
        "x <- y ",
        "> ",
        "res <- circ.mle(x, distr = \"wrapcauchy\")",
        "> ",
        "res",
        "$iters\n[1] 23\n\n$loglik\n[1] 138.4092\n\n$param\nmean direction            rho \n    0.05671356     0.98042001 \n\n",
        "> ",
        "x",
        "  [1]     3.4176532     1.4552827     3.3998191    -0.7022226     2.3709780     4.6639577     2.4832736\n  [8]     2.6425904     3.4938421   135.0741131     3.2778552    -0.3822720     4.8848244     0.8482349\n [15]     1.8758929   -11.0818489     3.8723520   -11.6717234   -46.9703491     3.0874073     3.8780644\n [22]     2.2621441     3.3888436     3.6494342     4.7422660    -6.0668535    -7.7051512     4.1572594\n [29]     3.8178312     7.4915811 -2113.9072404     4.5443279     4.5634839   -20.3691164     3.7689134",
        "\n [36]     0.9015751     3.5108004    -2.3069075     3.4419556     4.5168928    -0.4385098     2.9686549\n [43]     2.3081961     2.1908543     3.9462651     4.3687963     4.7953622     3.2459275    -6.0562376\n [50]     3.9145605     2.2435019     1.5501706    31.8869955     3.0315266     3.5449029    13.4437619\n [57]     3.2816581     4.9519103     2.2200279     1.5915318     3.3268121    -1.9629995     2.1815853\n [64]     3.0933098     5.9611474     1.6917211     2.4361017     2.4388516     4.6551039     7.6492661",
        "\n [71]     2.5701777     2.2422606     6.1744978     2.7114743     0.3754879     5.0301028     7.4957959\n [78]    -0.7171639     2.5685283     6.8943927     2.3148764    -1.6850741     4.0024946     2.2449308\n [85]     4.2728277     3.2258512     3.1350916     3.3339415     3.3465961     4.1672055     4.4754580\n [92]     3.2242721     4.2592148     1.9220248     2.1243671     4.8521804     3.8817480     6.9483359\n [99]     1.9138073     4.0612554\n",
        "> ",
        "x=y%%(2*pi)",
        "> ",
        "x",
        "  [1] 3.4176532 1.4552827 3.3998191 5.5809627 2.3709780 4.6639577 2.4832736 2.6425904 3.4938421 3.1272216\n [11] 3.2778552 5.9009134 4.8848244 0.8482349 1.8758929 1.4845218 3.8723520 0.8946473 3.2951333 3.0874073\n [21] 3.8780644 2.2621441 3.3888436 3.6494342 4.7422660 0.2163318 4.8612195 4.1572594 3.8178312 1.2083958\n [31] 3.5262081 4.5443279 4.5634839 4.7636248 3.7689134 0.9015751 3.5108004 3.9762778 3.4419556 4.5168928\n [41] 5.8446755 2.9686549 2.3081961 2.1908543 3.9462651 4.3687963 4.7953622 3.2459275 0.2269477",
        " 3.9145605\n [51] 2.2435019 1.5501706 0.4710690 3.0315266 3.5449029 0.8773913 3.2816581 4.9519103 2.2200279 1.5915318\n [61] 3.3268121 4.3201858 2.1815853 3.0933098 5.9611474 1.6917211 2.4361017 2.4388516 4.6551039 1.3660808\n [71] 2.5701777 2.2422606 6.1744978 2.7114743 0.3754879 5.0301028 1.2126106 5.5660214 2.5685283 0.6112074\n [81] 2.3148764 4.5981112 4.0024946 2.2449308 4.2728277 3.2258512 3.1350916 3.3339415 3.3465961 4.1672055\n [91] 4.4754580 3.2242721 4.2592148 1.9220248 2.1243671 4.8521804 3.8817480 0.6651505",
        " 1.9138073 4.0612554\n",
        "> ",
        "circ.mle(x,rads=T,distr=circexp)",
        "Error: object 'circexp' not found\n",
        "> ",
        "circ.mle(x,rads=T,distr=\"circexp\")",
        "$loglik\n[1] -315191\n\n$lambda\nNULL\n\n",
        "> ",
        " Directional::circexp.mle(x, rads = TRUE, tol = tol)",
        "Error: object 'tol' not found\n",
        "> ",
        " Directional::circexp.mle(x, rads = TRUE, tol = tol)",
        "Error: object 'tol' not found\n",
        "> ",
        " Directional::circexp.mle(x, rads = TRUE)",
        "$loglik\n[1] -315191\n\n$lambda\nNULL\n\n\nRestarting R session...\n\n",
        "> ",
        "library(MLE)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(MLE)",
        "> ",
        "y <- rcauchy(100, 3, 1)",
        "> ",
        "",
        "> ",
        "y/(2*pi)",
        "  [1]  0.34453599 -1.46159105 -0.32362682  0.67152354  0.42452960  0.34642903  0.32615236  0.17109245  0.37157688\n [10]  0.38882302 -0.02386517  0.52759799  0.46274356  0.57588108  0.50362649  1.15366758  0.78570011  0.57024063\n [19]  0.28536323  0.28910139  0.43190518  0.10398377  0.06691937  0.29278194  0.53341136 -2.80647583  0.45575261\n [28]  0.42109986  0.57292342  0.48537621  0.30484170  0.55416070  0.61168894  0.41076541  0.60678290  0.36040227\n [37]  0.24891409  0.40837976  0.76743240  0.43203868  0.16646736",
        "  1.26461231  0.42712854  0.42698441  0.77585903\n [46]  0.38452566  0.15705030  0.65985905  1.64412062 -0.17386235  0.78463872  0.40970725  0.19870111  0.71221772\n [55]  0.48063161  0.59246419  0.44482590  0.76210036  0.59900722  0.48929739  0.56824088  0.21708699  2.05066551\n [64]  0.40672275  0.59271020  0.42216933  0.48338203  0.94173286  0.06431799  0.46434757  0.36902055  0.45332421\n [73]  1.83315166  0.56700455  0.35967722  0.47913202  0.44812894  0.49624191  0.40176982  0.01760364  0.53814457\n [82] -5.97161358",
        "  0.48447225  0.71459440  0.54666985  0.59562900  0.58514367  0.83595955  0.47642636  0.53118974\n [91] -0.00819463  0.58307024  0.47031885  0.61617640  0.37263943  0.76186457  0.56354720  0.32448925  0.52117777\n[100]  0.52658183\n",
        "> ",
        "y/(2*pi)/(2*pi)",
        "  [1]  0.054834605 -0.232619440 -0.051506808  0.106876290  0.067565985  0.055135893  0.051908760  0.027230209\n  [9]  0.059138297  0.061883105 -0.003798260  0.083969828  0.073647925  0.091654320  0.080154645  0.183611899\n [17]  0.125048056  0.090756615  0.045416969  0.046011915  0.068739844  0.016549531  0.010650549  0.046597692\n [25]  0.084895055 -0.446664500  0.072535281  0.067020125  0.091183594  0.077250022  0.048517063  0.088197414\n [33]  0.097353319  0.065375345  0.096572499  0.057359802  0.039615908  0.064995658",
        "  0.122140660  0.068761092\n [41]  0.026494104  0.201269300  0.067979619  0.067956680  0.123481800  0.061199160  0.024995331  0.105019829\n [49]  0.261669924 -0.027671053  0.124879131  0.065206934  0.031624265  0.113352971  0.076494897  0.094293605\n [57]  0.070796241  0.121292039  0.095334960  0.077874098  0.090438344  0.034550467  0.326373553  0.064731936\n [65]  0.094332758  0.067190336  0.076932639  0.149881440  0.010236526  0.073903210  0.058731445  0.072148789\n [73]  0.291755148  0.090241577  0.057244407  0.076256229",
        "  0.071321936  0.078979352  0.063943652  0.002801707\n [81]  0.085648368 -0.950411819  0.077106154  0.113731231  0.087005209  0.094797300  0.093128508  0.133047094\n [89]  0.075825610  0.084541472 -0.001304216  0.092798510  0.074853569  0.098067519  0.059307408  0.121254512\n [97]  0.089691323  0.051644068  0.082948019  0.083808101\n",
        "> ",
        "Rfast2::colsp.mle",
        "function (x) \n{\n    n <- dim(x)[1]\n    slx <- Rfast::colsums(log(x))\n    b <- -n/slx\n    loglik <- n * log(b) + (b - 1) * slx\n    res <- cbind(b, loglik)\n    colnames(res) <- c(\"beta\", \"loglik\")\n    res\n}\n<bytecode: 0x000002c284bb3410>\n<environment: namespace:Rfast2>\n",
        "> ",
        " Rfast2::cbern.mle",
        "function (x, tol = 1e-06) \n{\n    n <- length(x)\n    sx <- sum(x)\n    sx1 <- sum(1 - x)\n    oop <- options(warn = -1)\n    on.exit(options(oop))\n    fun <- function(lam, sx, sx1, n) {\n        clam <- (n * log(atanh(1 - 2 * lam)) - n * log(1 - 2 * \n            lam)) * (lam != 0.5)\n        clam + sx * log(lam) + sx1 * log(1 - lam)\n    }\n    mod <- optimize(fun, c(1e-10, 1 - 1e-10), sx = sx, sx1 = sx1, \n        n = n, maximum = TRUE, tol = tol)\n    list(lam = mod$maximum, loglik = n * log(2) + mod$objective)\n}\n<bytecode: 0x000002c2f9d685a8>\n",
        "<environment: namespace:Rfast2>\n",
        "> ",
        "Rfast2::sp.mle",
        "function (x) \n{\n    n <- length(x)\n    slx <- sum(log(x))\n    b <- -n/slx\n    loglik <- n * log(b) + (b - 1) * slx\n    list(loglik = loglik, beta = b)\n}\n<bytecode: 0x000002c2ecb002e0>\n<environment: namespace:Rfast2>\n",
        "> ",
        " Rfast2::kumar.mle",
        "function (x, tol = 1e-07, maxiters = 50) \n{\n    n <- length(x)\n    lx <- log(x)\n    slx <- sum(lx)\n    ini <- Rfast::beta.mle(x)$param\n    expa <- ini[1]\n    expb <- ini[2]\n    xa <- x^expa\n    ya <- 1 - xa\n    com <- xa * lx/ya\n    scom <- sum(com)\n    derab <- -expb * expa * scom\n    dera <- n + expa * slx + (1 - 1/expb) * derab\n    dera2 <- expa * slx - (expb - 1) * expa^2 * sum(com * lx/ya)\n    derb2 <- expb * sum(log(ya))\n    derb <- n + derb2\n    aold <- c(log(expa), log(expb))\n    anew <- aold - c(derb2 * dera - derab * derb, -derab * dera + \n",
        "        dera2 * derb)/(dera2 * derb2 - derab^2)\n    i <- 2\n    while (sum(abs(anew - aold)) > tol & i < maxiters) {\n        i <- i + 1\n        aold <- anew\n        expa <- exp(aold[1])\n        expb <- exp(aold[2])\n        xa <- x^expa\n        ya <- 1 - xa\n        com <- xa * lx/ya\n        scom <- sum(com)\n        derab <- -expb * expa * scom\n        dera <- n + expa * slx + (1 - 1/expb) * derab\n        dera2 <- expa * slx - (expb - 1) * expa^2 * sum(com * \n            lx/ya)\n        derb2 <- expb * sum(log(ya))\n",
        "        derb <- n + derb2\n        anew <- aold - c(derb2 * dera - derab * derb, -derab * \n            dera + dera2 * derb)/(dera2 * derb2 - derab^2)\n    }\n    a <- exp(anew[1])\n    b <- exp(anew[2])\n    param <- c(a, b)\n    loglik <- n * log(a * b) + (a - 1) * slx + (b - 1) * derb2/expb\n    names(param) <- c(\"shape\", \"scale\")\n    list(iters = i, param = param, loglik = loglik)\n}\n<bytecode: 0x000002c2f9dbc090>\n<environment: namespace:Rfast2>\n",
        "> ",
        " Rfast::hsecant01.mle",
        "function (x, tol = 1e-09) \n{\n    sy1 <- sum(log(x))\n    sy2 <- sum(log(1 - x))\n    com <- -0.5 * sy1 - 0.5 * sy2\n    comp <- sy1/pi - sy2/pi\n    n <- length(x)\n    a <- -0.5 * pi\n    b <- 0.5 * pi\n    ratio <- 2/(sqrt(5) + 1)\n    x1 <- b - ratio * (b - a)\n    x2 <- a + ratio * (b - a)\n    f1 <- n * log(cos(x1)) + x1 * comp\n    f2 <- n * log(cos(x2)) + x2 * comp\n    while (abs(b - a) > tol) {\n        if (f2 < f1) {\n            b <- x2\n            x2 <- x1\n            f2 <- f1\n            x1 <- b - ratio * (b - a)\n",
        "            f1 <- n * log(cos(x1)) + x1 * comp\n        }\n        else {\n            a <- x1\n            x1 <- x2\n            f1 <- f2\n            x2 <- a + ratio * (b - a)\n            f2 <- n * log(cos(x2)) + x2 * comp\n        }\n    }\n    theta <- (x1 + x2)/2\n    loglik <- n * log(cos(theta)/pi) + com + theta * comp\n    list(loglik = loglik, theta = theta)\n}\n<bytecode: 0x000002c2f9e0a990>\n<environment: namespace:Rfast>\n",
        "> ",
        "  res <- matrix(, dim(x)[2], 3)",
        "Error in matrix(, dim(x)[2], 3) : non-numeric matrix extent\n",
        "> ",
        "  res <- matrix(, 4, 3)",
        "> ",
        "res",
        "     [,1] [,2] [,3]\n[1,]   NA   NA   NA\n[2,]   NA   NA   NA\n[3,]   NA   NA   NA\n[4,]   NA   NA   NA\n",
        "> ",
        "?Rfast::kumar.mle",
        "No documentation for ‘kumar.mle’ in specified packages and libraries:\nyou could try ‘??kumar.mle’\n",
        "> ",
        "?Rfast2::kumar.mle",
        "> ",
        "?Rfast2::cbern.mle",
        "\nRestarting R session...\n\n"
    ]
}